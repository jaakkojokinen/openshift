#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('nodeauth:server');
var http = require('http');
var env = process.env;

/**
 * Get port from environment and store in Express.
 */

console.log('mode is ' + env.DEV_MODE);
var port = normalizePort(env.OPENSHIFT_NODEJS_PORT || 8080);
app.set('port', port);

var ip = env.OPENSHIFT_NODEJS_IP;

console.log('node port is ' + port);
console.log('node ip is ' + ip);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

console.log('1. health check');

app.get('/health', function(req, res, next) {
  res.writeHead(200);
  res.end();
});

server.listen(port, ip || 'localhost', function () {
  console.log( "Listening on " + ip + ", server_port " + port )
  console.log('Application worker ${process.pid} started...');
  console.log('node mode ' + env.NODE_ENV);
});

server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

//Event listener for HTTP server "error" event.
 
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

//Event listener for HTTP server "listening" event.

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
